#!/usr/bin/python

import os, sys
import json
import argparse

def parseArguments():
        # Create argument parser
        parser = argparse.ArgumentParser(description = 'This script computes the persistence for each gene of each genome in the given homolog dictionary (json format, generated by make_core_genome.py). \n\t # Command line example: python make_persistence.py Streptomyces C:/Users/Lorenzi/Documents/Streptomyces/')

        # Positional mandatory arguments
        parser.add_argument("run", help="run name", type=str)
        parser.add_argument("path", help="absolute or relative path to directory containing the json homolog file", type=str)
        # Print version
        parser.add_argument("--version", action="version", version='%(prog)s - Version 1.5 - 06.04.2022')

        # Parse arguments
        args = parser.parse_args()

return args


def ortholog_finder(homolog):
        """ Finds all the ortholog genes for each pair of organisms of the collection. A dictionary of homologous genes like dictionary generated by homolog_finder() is required.
        A pair of ortlogous genes is defined as best hit between two genes.
        
        dictionary structure:
        
                [ref name][tar name][ID ref] = ID tar
                
                > ref name: name of organism in collection like "Streptomyces_coelicolor_A3(2)"
                > ref tar: name of organism in collection like "Streptomyces_coelicolor_A3(2)"
                > ID ref: CDS ID of ref organism like: 'chrI_+_576-699'
                > ID tar: CDS ID of tar organism like: 'chrI_+_576-699' if the ortholog exists, else, ID tar = 'NA'
                
        Examples:
                >>> 
        """
        ortholog = {}
        nb_organism = len(homolog.keys())
        i = 0
        print('# Ortholog dertermination...')
        for ref in homolog:
                i += 1 
                print('\r\t' + str(i) + '/' + str(nb_organism), end = '')
                if ref not in ortholog:
                        ortholog[ref] = {}
                for tar in homolog[ref]:
                        if tar not in ortholog[ref]:
                                ortholog[ref][tar] = {}
                        for ref_gene in homolog[ref][tar]:
                                tar_gene = homolog[ref][tar][ref_gene]
                                if tar_gene != 'NA' and homolog[tar][ref][tar_gene] == ref_gene:
                                        ortholog[ref][tar][ref_gene] = tar_gene
                                else:
                                        ortholog[ref][tar][ref_gene] = 'NA'
        print('\nDone\n')
        return ortholog


def persistence_finder(ortholog):
        '''
        Computes gene persitence for each species
        '''
        
        persistence = {}
        nb_species = len(ortholog)
        for species in sorted(ortholog):
                persistence[species] = {}
                for cds in ortholog[species][species]:
                        persistence[species][cds] = 0
                        for target in sorted(ortholog[species]):
                                if ortholog[species][target][cds] != 'NA':
                                        persistence[species][cds] += 1
                        persistence[species][cds] = persistence[species][cds] / nb_species
        return persistence

def main():

args = parseArguments()
run = args.run
path = args.path

path_homolog = path + '/homolog_' + run + '.txt'

with open(path_homolog, 'r') as infile:
        homolog = json.load(infile)

path_ortholog = path + '/ortholog_' + run + '.txt'
ortholog = ortholog_finder(homolog)

with open(path_ortholog, 'w') as outfile:
    json.dump(ortholog, outfile)
        
persistence = persistence_finder(ortholog)        
if not os.path.exists(path + '/persistence/'):
        os.makedirs(path + '/persistence/')
for species in persistence:
        with open(path + '/persistence/' + species + '.tab', 'w') as outfile:                        
                outfile.write('\t'.join([str(x) for x in sorted(persistence[species], key = lambda x: int(x.split('_')[1]))]) + 
                                '\n' + 
                                '\t'.join([str(persistence[species][x]) for x in sorted(persistence[species], key = lambda x: int(x.split('_')[1]))]) + '\n')


if __name__ == "__main__":
main()
