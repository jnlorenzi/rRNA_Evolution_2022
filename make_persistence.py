#!/usr/bin/python

import os, sys
import json
import argparse

def parseArguments():
    # Create argument parser
    parser = argparse.ArgumentParser(description = 'This script computes the persistence for each gene of each genome in the given homolog dictionary (json format, generated by make_core_genome.py). \n\t # Command line example: python make_persistence.py C:/Users/Lorenzi/Documents/Streptomyces/homolog.txt C:/Users/Lorenzi/Documents/Streptomyces/anib/')
    
    # Positional mandatory arguments
    parser.add_argument("fasta_directory", help="absolute or relative path to the fasta directory", type=str)
    parser.add_argument("output_anib", help="absolute or relative path to the outfile anib directory", type=str)
    
    # Print version
    parser.add_argument("--version", action="version", version='%(prog)s - Version 1.5 - 31.03.2022')
    
    # Parse arguments
    args = parser.parse_args()

    return args


def ortholog_finder(homolog):
        """ Finds all the ortholog genes for each pair of organisms of the collection. A dictionary of homologous genes like dictionary generated by homolog_finder() is required.
        A pair of ortlogous genes is defined as best hit between two genes.
        
        dictionary structure:
        
                [ref name][tar name][ID ref] = ID tar
                
                > ref name: name of organism in collection like "Streptomyces_coelicolor_A3(2)"
                > ref tar: name of organism in collection like "Streptomyces_coelicolor_A3(2)"
                > ID ref: CDS ID of ref organism like: 'chrI_+_576-699'
                > ID tar: CDS ID of tar organism like: 'chrI_+_576-699' if the ortholog exists, else, ID tar = 'NA'
                
        Examples:
                >>> 
        """
        ortholog = {}
        nb_organism = len(homolog.keys())
        i = 0
        print('# Ortholog dertermination...')
        for ref in homolog:
                i += 1 
                print('\r\t' + str(i) + '/' + str(nb_organism), end = '')
                if ref not in ortholog:
                        ortholog[ref] = {}
                for tar in homolog[ref]:
                        if tar not in ortholog[ref]:
                                ortholog[ref][tar] = {}
                        for ref_gene in homolog[ref][tar]:
                                tar_gene = homolog[ref][tar][ref_gene]
                                if tar_gene != 'NA' and homolog[tar][ref][tar_gene] == ref_gene:
                                        ortholog[ref][tar][ref_gene] = tar_gene
                                else:
                                        ortholog[ref][tar][ref_gene] = 'NA'
        print('\nDone\n')
        return ortholog


def persistence_finder(ortholog):
        '''
        Computes gene persitence for each species
        '''
        
        persistence = {}
        nb_species = len(ortholog)
        for species in sorted(ortholog):
                persistence[species] = {}
                for cds in ortholog[species][species]:
                        persistence[species][cds] = 0
                        for target in sorted(ortholog[species]):
                                if ortholog[species][target][cds] != 'NA':
                                        persistence[species][cds] += 1
                        persistence[species][cds] = persistence[species][cds] / nb_species
        return persistence

def main():
  
  args = parseArguments()
  fasta_directory = args.fasta_directory
  output_anib =  args.output_anib
  
  
  ortholog = pickle.load(open(path_base + '/' + 'ortholog' + condition + '.p', 'rb'))
            annotation = pickle.load(open(path_base + '/annotation' + condition + '.p', 'rb'))
            persistence = persistence_finder(ortholog)        
            if not os.path.exists(path_intermediate_data + '/persistence/'):
                    os.makedirs(path_intermediate_data + '/persistence/')
            for species in persistence:
                    with open(path_intermediate_data + '/persistence/' + species + '.tab', 'w') as outfile:                        
                            pos = position_extractor(persistence[species], annotation)
                            outfile.write('\t'.join([str(pos[x].split('_')[-1].split('-')[0]) for x in sorted(pos, key = lambda x: int(x.split('_')[1]))]) + 
                                        '\n' + 
                                        '\t'.join([str(persistence[species][x]) for x in sorted(persistence[species], key = lambda x: int(x.split('_')[1]))]) + '\n')


if __name__ == "__main__":
    main()
